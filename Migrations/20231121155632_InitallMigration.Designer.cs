// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TasksWebApp;

#nullable disable

namespace TasksWebApp.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231121155632_InitallMigration")]
    partial class InitallMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("TasksWebApp.Models.ListOfTasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Background")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ListsOfTasks");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Background = "blue.jpg",
                            Name = "Університет",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("TasksWebApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImportantBackground")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PlanedBackground")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TasksBackground")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TodayBackground")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImportantBackground = "783283475.jpg",
                            Login = "artem123",
                            Name = "Артем",
                            Password = "12345678",
                            PlanedBackground = "53454.jpg",
                            Surname = "Бабенко",
                            TasksBackground = "5464774.jpg",
                            TodayBackground = "89495645.jpg"
                        });
                });

            modelBuilder.Entity("TasksWebApp.Models.UserTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Important")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ListOfTasksId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Today")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ListOfTasksId");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Completed = false,
                            CreateDate = new DateTime(2023, 11, 21, 17, 56, 32, 862, DateTimeKind.Local).AddTicks(8400),
                            Important = false,
                            Name = "Намалювати картинку.",
                            Today = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Completed = false,
                            CreateDate = new DateTime(2023, 11, 21, 17, 56, 32, 862, DateTimeKind.Local).AddTicks(8404),
                            Important = false,
                            Name = "Зробити програму для сайту.",
                            Today = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Completed = false,
                            CreateDate = new DateTime(2023, 11, 21, 17, 56, 32, 862, DateTimeKind.Local).AddTicks(8406),
                            Important = false,
                            ListOfTasksId = 2,
                            Name = "Написати семінар.",
                            Today = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Completed = false,
                            CreateDate = new DateTime(2023, 11, 21, 17, 56, 32, 862, DateTimeKind.Local).AddTicks(8410),
                            Important = false,
                            ListOfTasksId = 2,
                            Name = "Виконати контрольну.",
                            Today = false,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("TasksWebApp.Models.WastedTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("WastedTimes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 11, 21, 17, 56, 32, 862, DateTimeKind.Local).AddTicks(8327),
                            TaskId = 3,
                            Time = new TimeSpan(0, 0, 19, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 11, 21, 17, 56, 32, 862, DateTimeKind.Local).AddTicks(8373),
                            TaskId = 3,
                            Time = new TimeSpan(0, 0, 53, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 11, 21, 17, 56, 32, 862, DateTimeKind.Local).AddTicks(8376),
                            TaskId = 4,
                            Time = new TimeSpan(0, 0, 45, 0, 0)
                        });
                });

            modelBuilder.Entity("TasksWebApp.Models.WeekDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("WeekDays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Index = 1,
                            Name = "Monday",
                            TaskId = 3
                        },
                        new
                        {
                            Id = 2,
                            Index = 2,
                            Name = "Tuesday",
                            TaskId = 3
                        },
                        new
                        {
                            Id = 3,
                            Index = 3,
                            Name = "Wednesday",
                            TaskId = 3
                        },
                        new
                        {
                            Id = 4,
                            Index = 4,
                            Name = "Thursday",
                            TaskId = 3
                        },
                        new
                        {
                            Id = 5,
                            Index = 5,
                            Name = "Friday",
                            TaskId = 3
                        },
                        new
                        {
                            Id = 6,
                            Index = 6,
                            Name = "Saturday",
                            TaskId = 4
                        },
                        new
                        {
                            Id = 7,
                            Index = 7,
                            Name = "Sunday",
                            TaskId = 4
                        });
                });

            modelBuilder.Entity("TasksWebApp.Models.ListOfTasks", b =>
                {
                    b.HasOne("TasksWebApp.Models.User", "User")
                        .WithMany("ListsOfTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TasksWebApp.Models.UserTask", b =>
                {
                    b.HasOne("TasksWebApp.Models.ListOfTasks", "ListOfTasks")
                        .WithMany("Tasks")
                        .HasForeignKey("ListOfTasksId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TasksWebApp.Models.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ListOfTasks");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TasksWebApp.Models.WastedTime", b =>
                {
                    b.HasOne("TasksWebApp.Models.UserTask", "Task")
                        .WithMany("WastedTimes")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TasksWebApp.Models.WeekDay", b =>
                {
                    b.HasOne("TasksWebApp.Models.UserTask", "Task")
                        .WithMany("DaysToRepeat")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TasksWebApp.Models.ListOfTasks", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TasksWebApp.Models.User", b =>
                {
                    b.Navigation("ListsOfTasks");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TasksWebApp.Models.UserTask", b =>
                {
                    b.Navigation("DaysToRepeat");

                    b.Navigation("WastedTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
